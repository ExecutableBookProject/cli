{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Interactive code in your book\n",
    "\n",
    "Sometimes you'd rather let people interact with code *directly on the page*\n",
    "instead of sending them off to a Binder or a JupyterHub. There are currently\n",
    "a few ways to make this happen in Jupyter Book (both of which are experimental).\n",
    "\n",
    "This page describes how to bring interactivity to your book. Both of these\n",
    "tools use [**MyBinder**](https://mybinder.org) to provide a remote kernel.\n",
    "\n",
    "## Making your page inputs interactive\n",
    "\n",
    "✨**experimental**✨\n",
    "\n",
    "If you'd like to provide interactivity for your content without making your readers\n",
    "leave the Jupyter Book site, you can use a project called [Thebelab](https://github.com/minrk/thebelab).\n",
    "\n",
    "This provides you a button that, when clicked, will convert each code cell into\n",
    "an **interactive** cell that can be edited. It also adds a \"run\" button to each cell,\n",
    "and connects to a Binder kernel running in the cloud.\n",
    "As an alternative to pressing the Thebelab button at the top of the page, you \n",
    "can press the <img src=\"../images/logo/edit-button.svg\" alt=\"\" style=\"width: 20px; display: inline;\" /> symbol in the top right corner of each code cell to start the \n",
    "interactive mode.\n",
    "\n",
    "To add a Thebelab button to your Jupyter Book pages, use the following configuration:\n",
    "\n",
    "```yaml\n",
    "use_thebelab_button              : true  # If 'true', display a button to allow in-page running code cells with Thebelab\n",
    "```\n",
    "\n",
    "In addition, you can configure the Binder settings that are used to provide a kernel for\n",
    "Thebelab to run the code. These use the same configuration fields as the BinderHub interact\n",
    "buttons described above.\n",
    "\n",
    "For an example, click the **Thebelab** button above on this page, and run the code below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.ion()\n",
    "\n",
    "x = np.arange(500)\n",
    "y = np.random.randn(500)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(x, y, c=y, s=x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Running cells in Thebelab when it is initialized\n",
    "\n",
    "Sometimes you'd like to initialize the kernel that Thebelab uses by running\n",
    "some code ahead of time. This might be code that you then hide from the user\n",
    "in order to narrow the focus of what they interact with. This is possible\n",
    "by using Jupyter Notebook tags.\n",
    "\n",
    "Adding the tag `thebelab-init` to any code cell will cause Thebelab to\n",
    "run this cell after it has received a kernel. Any subsequent Thebelab cells\n",
    "will have access to the same environment (e.g. any module imports made in the\n",
    "initialization cell).\n",
    "\n",
    "You can then pair this with something like `hide_input` in order to run\n",
    "initialization code that your user doesn't immediately see. For example,\n",
    "below we'll initialize a variable in a hidden cell, and then tell another\n",
    "cell to print the output of that variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "thebelab-init",
     "hide_input"
    ]
   },
   "outputs": [],
   "source": [
    "my_hidden_variable = 'wow, it worked!'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The variable for this is defined in the cell above!\n",
    "print(my_hidden_variable)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using interactive widgets on your page\n",
    "\n",
    "✨**experimental**✨\n",
    "\n",
    "[**nbinteract**](https://www.nbinteract.com) is a tool for displaying interactive widgets in your\n",
    "static HTML page. It uses a Binder kernel to power the widgets, and displays output that your\n",
    "readers can interact with. For example, below we will show a simple matplotlib plot that can be made\n",
    "interactive with **ipywidgets**\n",
    "\n",
    "To add a **Show Widgets** button to your Jupyter Book pages, use the following configuration:\n",
    "\n",
    "```yaml\n",
    "use_show_widgets_button         : true  # If 'true', display a button to show widgets backed by a Binder kernel\n",
    "```\n",
    "\n",
    "Then, tell Jupyter Book that you want a cell to display a widget by **adding a tag** to the cell's\n",
    "metadata called `interactive`. When a reader clicks on the \"show widgets\" button, any cells\n",
    "with this tag will be run on Binder, and have their output widgets displayed underneath the cell.\n",
    "\n",
    "Here's an example of cell metadata that would trigger this behavior:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"interactive\",\n",
    "    ]\n",
    "}\n",
    "```\n",
    "\n",
    "You can configure the Binder settings that are used to provide a kernel to run the code.\n",
    "These use the same configuration fields as the BinderHub interact buttons described above.\n",
    "\n",
    "Clicking on \"show widgets\" should display a widget below. We've hidden the code cell that\n",
    "generates the widget by default (though you can always show it by clicking the button to\n",
    "the right!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide_input",
     "interactive"
    ]
   },
   "outputs": [],
   "source": [
    "from ipywidgets import interact, FloatSlider\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import display, HTML\n",
    "plt.ion()\n",
    "\n",
    "x = np.arange(500)\n",
    "y = np.random.randn(500)\n",
    "\n",
    "def update_plot_size(s, cmap):\n",
    "    if cmap == \"jet\":\n",
    "        display(HTML(\"<h2 style='color: red; margin: 0px auto;'>Nope</h2>\"))\n",
    "        return\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.scatter(x, y, c=y, s=x*s, cmap=cmap)\n",
    "\n",
    "interact(update_plot_size, s=FloatSlider(value=1, min=.1, max=2, step=.1), cmap=['viridis', 'magma', 'jet']);"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "102c5b7404364fb7b9d91b2460836e31": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatSliderModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatSliderModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "FloatSliderView",
       "continuous_update": true,
       "description": "s",
       "description_tooltip": null,
       "disabled": false,
       "layout": "IPY_MODEL_cb84630e7d7043d698c087e08ce1d1db",
       "max": 2.0,
       "min": 0.1,
       "orientation": "horizontal",
       "readout": true,
       "readout_format": ".2f",
       "step": 0.1,
       "style": "IPY_MODEL_93f90fbf60814fa98285d0b6b91f796f",
       "value": 1.0
      }
     },
     "1a6ac0bd40224a918b18c577de309496": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DropdownModel",
       "_options_labels": [
        "viridis",
        "magma",
        "jet"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "DropdownView",
       "description": "cmap",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_321d5513581845db9b47cc8f59141acd",
       "style": "IPY_MODEL_ca0951286926484eb72137590db31f14"
      }
     },
     "321d5513581845db9b47cc8f59141acd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "356daedd325248c1aca28e88b3e39228": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_102c5b7404364fb7b9d91b2460836e31",
        "IPY_MODEL_1a6ac0bd40224a918b18c577de309496",
        "IPY_MODEL_40ef18245e274e31b41334adf6f5c255"
       ],
       "layout": "IPY_MODEL_9d99dbbc6472415db7bf31c10d979ba8"
      }
     },
     "40ef18245e274e31b41334adf6f5c255": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_789ee3601f5a4632833d4463e12be1a7",
       "msg_id": "",
       "outputs": []
      }
     },
     "789ee3601f5a4632833d4463e12be1a7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "93f90fbf60814fa98285d0b6b91f796f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SliderStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "SliderStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "",
       "handle_color": null
      }
     },
     "9d99dbbc6472415db7bf31c10d979ba8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ca0951286926484eb72137590db31f14": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "cb84630e7d7043d698c087e08ce1d1db": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
