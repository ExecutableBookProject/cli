{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Controlling the page layout\n",
    "\n",
    "✨**experimental**✨\n",
    "\n",
    "There are a few ways to control the layout of a page with Jupyter Book. Many of these\n",
    "ideas take inspiration from the [Edward Tufte layout CSS guide](https://edwardtufte.github.io/tufte-css/).\n",
    "\n",
    "## Our plot\n",
    "\n",
    "Let's begin with a sample plot. Here's the code we'll use:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove_cell"
    ]
   },
   "outputs": [],
   "source": [
    "from matplotlib import rcParams, cycler\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "plt.ion()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fixing random state for reproducibility\n",
    "np.random.seed(19680801)\n",
    "\n",
    "N = 10\n",
    "data = [np.logspace(0, 1, 100) + .2 * np.random.randn(100) + ii for ii in range(N)]\n",
    "data = np.array(data).T\n",
    "cmap = plt.cm.coolwarm\n",
    "rcParams['axes.prop_cycle'] = cycler(color=cmap(np.linspace(0, 1, N)))\n",
    "\n",
    "\n",
    "from matplotlib.lines import Line2D\n",
    "custom_lines = [Line2D([0], [0], color=cmap(0.), lw=4),\n",
    "                Line2D([0], [0], color=cmap(.5), lw=4),\n",
    "                Line2D([0], [0], color=cmap(1.), lw=4)]\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 5))\n",
    "lines = ax.plot(data)\n",
    "ax.legend(custom_lines, ['Cold', 'Medium', 'Hot']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using popouts to the right sidebar\n",
    "\n",
    "Sometimes you want to quickly point out an extra piece of information, but\n",
    "you don't want to break your narrative flow. Use a popout for this!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "popout"
    ]
   },
   "source": [
    "**For example**, here's some popout content! It was created by adding the\n",
    "`popout` tag to a cell in the notebook. Jupyter Book automatically converts these\n",
    "cells into helpful side content."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Add a popout cell by adding `popout` to your cell's tags. Here's what the\n",
    "cell metadata for a popout cell looks like:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"popout\",\n",
    "    ]\n",
    "}\n",
    "```\n",
    "\n",
    "**Popouts behave differently depending on the screen size**. If the screen is narrow\n",
    "enough, the popout will exist in-line with your content. Make the screen\n",
    "wider and it'll pop out to the right.\n",
    "\n",
    "Look to the right and play around with your window width to see how this looks!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**You can include images in popouts!** For example, let's see what the plot above looks like in a popout window."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "popout",
     "remove_input"
    ]
   },
   "outputs": [],
   "source": [
    "# Fixing random state for reproducibility\n",
    "np.random.seed(19680801)\n",
    "\n",
    "N = 10\n",
    "data = [np.logspace(0, 1, 100) + .1*np.random.randn(100) + ii for ii in range(N)]\n",
    "data = np.array(data).T\n",
    "cmap = plt.cm.coolwarm\n",
    "rcParams['axes.prop_cycle'] = cycler(color=cmap(np.linspace(0, 1, N)))\n",
    "\n",
    "\n",
    "from matplotlib.lines import Line2D\n",
    "custom_lines = [Line2D([0], [0], color=cmap(0.), lw=4),\n",
    "                Line2D([0], [0], color=cmap(.5), lw=4),\n",
    "                Line2D([0], [0], color=cmap(1.), lw=4)]\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 5))\n",
    "lines = ax.plot(data)\n",
    "ax.legend(custom_lines, ['Cold', 'Medium', 'Hot'])\n",
    "ax.set(title=\"Smoother linez\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "popout"
    ]
   },
   "source": [
    "**My popout explanation**. Since we've put a markdown cell underneath the code above,\n",
    "we can turn this into a popout as well, and use it as a quick caption to explain\n",
    "the content above (we have hidden the code for the above plot with a `remove_input`\n",
    "tag). However, in the case of this figure, there's not a whole lot to explain :-)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quotations\n",
    "\n",
    "There are two types of quotations in Jupyter Book: **blockquotes**\n",
    "and **epigraphs**.\n",
    "\n",
    "**Blockquotes** are useful for calling out some information provided\n",
    "by another source. They don't break much with the content of the\n",
    "page.\n",
    "\n",
    "> Here's an example of a blockquote. It is triggered by using the\n",
    "> \"caret\" (`>`) symbol at the beginning of each line that you'd\n",
    "> like to add a blockquote for. If you finish the quote with a\n",
    "> `-` symbol, it will be treated as an \"attribution\" line and\n",
    "> will be right-aligned.\n",
    ">\n",
    "> - Jo the Jovyan"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "epigraph"
    ]
   },
   "source": [
    "**Epigraphs** are useful for introducing a particular page or idea.\n",
    "They're inspired by [Edward Tufte's epigraph CSS](https://edwardtufte.github.io/tufte-css/#epigraphs).\n",
    "Epigraphs have a bit more emphasis and also differ in style a bit more from\n",
    "your page's content in order to draw attention to them.\n",
    "\n",
    "> Here's an example of an epigraph quote. Note that in this case,\n",
    "> the quote itself is a bit larger and italicized. You probably\n",
    "> shouldn't make this *too* long so that they don't stand out\n",
    "> too much.\n",
    ">\n",
    "> - Jo the Jovyan"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To indicate that you'd like an *epigraph* instead of a *blockquote*, add\n",
    "the following tag your cell's tag list:\n",
    "    \n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"epigraph\",\n",
    "    ]\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scrolling cell outputs\n",
    "\n",
    "The traditional Jupyter Notebook interface allows you to toggle **output scrolling**\n",
    "for your cells. This allows you to visualize part of a long output without it taking up\n",
    "the entire page.\n",
    "\n",
    "You can trigger this behavior in Jupyter Book by adding the following\n",
    "tag to a cell's metadata:\n",
    "\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"output_scroll\",\n",
    "    ]\n",
    "}\n",
    "```\n",
    "\n",
    "For example, the following cell has a long output, but will be scrollable in the book."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "output_scroll"
    ]
   },
   "outputs": [],
   "source": [
    "for ii in range(40):\n",
    "    print(f\"this is output line {ii}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Wide-format cells\n",
    "\n",
    "Sometimes, you'd like to use **all** of the horizontal space available to you. This allows\n",
    "you to highlight particular ideas, visualizations, etc.\n",
    "\n",
    "In Jupyter Book, you can specify that the outputs of a cell (if it's a code cell) or the entire\n",
    "cell (if it's a markdown cell) should take up all of\n",
    "the horizonal space (including the sidebar where popouts normally live) using the\n",
    "following cell metadata tag:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"full_width\",\n",
    "    ]\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For example, let's take a look at the figure at full-width. We'll tell Matplotlib\n",
    "to make it a bit wider so we can take advantage of the extra space!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide_input",
     "full_width"
    ]
   },
   "outputs": [],
   "source": [
    "# Fixing random state for reproducibility\n",
    "np.random.seed(19680801)\n",
    "\n",
    "N = 10\n",
    "data = [np.logspace(0, 1, 100) + .1*np.random.randn(100) + ii for ii in range(N)]\n",
    "data = np.array(data).T\n",
    "cmap = plt.cm.coolwarm\n",
    "rcParams['axes.prop_cycle'] = cycler(color=cmap(np.linspace(0, 1, N)))\n",
    "\n",
    "\n",
    "from matplotlib.lines import Line2D\n",
    "custom_lines = [Line2D([0], [0], color=cmap(0.), lw=4),\n",
    "                Line2D([0], [0], color=cmap(.5), lw=4),\n",
    "                Line2D([0], [0], color=cmap(1.), lw=4)]\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(20, 5))\n",
    "lines = ax.plot(data)\n",
    "ax.legend(custom_lines, ['Cold', 'Medium', 'Hot'])\n",
    "ax.set(title=\"Smoother linez\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Be careful about mixing popouts and full-width content**. Sometimes these can conflict\n",
    "with one another in visual space. You should use them relatively sparingly in order\n",
    "for them to have their full effect of highlighting information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
