{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hiding or removing code blocks or entire cells\n",
    "\n",
    "It's possible to control which cells show up in your final book pages. For example,\n",
    "you may want to display a complex visualization to illustrate an idea, but don't\n",
    "want the page to be cluttered with a large code cell that generated the viz. In other\n",
    "cases, you may want to remove a code cell entirely.\n",
    "\n",
    "In this case, you have two options:\n",
    "\n",
    "* **Hiding** the inputs of a code cell will hide the cell's contents and provide\n",
    "  a button that lets readers reveal the content.\n",
    "* **Removing** the inputs (or the entire cell) will prevent the contents from\n",
    "  making it into your book's HTML. It will be entirely gone (though still present in\n",
    "  the `.ipynb` file)\n",
    "  \n",
    "In both cases, Jupyter Books uses **notebook cell tags** to determine which code cells to hide.\n",
    "To make this process easier to manage, we recommend the\n",
    "[JupyterLab Cell Tags extension](https://github.com/jupyterlab/jupyterlab-celltags)\n",
    "\n",
    "# Hiding page elements and displaying a button to show them\n",
    "\n",
    "You can hide most cell elements of a page. The sections below describe how\n",
    "to hide each.\n",
    "\n",
    "If an element is hidden, Jupyter Book will display a small button to the right of the \n",
    "old location for the hidden element. If a user clicks the button,\n",
    "the element will be displayed.\n",
    "\n",
    "## Hiding inputs \n",
    "\n",
    "If you add the tag `hide_input` to a cell, then Jupyter Book will hide the cell but\n",
    "display the outputs.\n",
    "\n",
    "Here's an example of cell metadata that would trigger the \"hide code\" behavior:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"hide_input\",\n",
    "    ]\n",
    "}\n",
    "```\n",
    "\n",
    "For example, see the cell below contains the `hide_input` tag:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.ion()\n",
    "\n",
    "data = np.random.randn(2, 100)\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(*data, c=data[1], s=100*np.abs(data[0]));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note how we only see the output by default. Now try clicking the button\n",
    "to the right of the empty spot above!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hiding outputs\n",
    "\n",
    "You can also hide the *outputs* of a cell. For example, if you'd like to ask users to\n",
    "think about what the output will look like first before viewing an answer. To do so,\n",
    "add the following tag to your cell:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"hide_output\",\n",
    "    ]\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide_output"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell should have its output hidden!\n",
    "data = np.random.randn(2, 100)\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(*data, c=data[1], s=100*np.abs(data[0]));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hiding markdown cells\n",
    "\n",
    "Finally, you can also hide markdown cells in your page. This is useful if you'd\n",
    "like to provide some extra information to readers that want to dig deeper, but you\n",
    "don't want to clutter the page with too much information. To do so,\n",
    "add the following tag to your markdown cell:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"hide_input\",\n",
    "    ]\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "source": [
    "For example, this cell should be hidden!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hiding the whole cell\n",
    "\n",
    "If you'd like to hide the whole cell (both inputs and outputs) just add each\n",
    "tag to the cell metadata, like so:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"hide_input\",\n",
    "        \"hide_output\"\n",
    "    ]\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide_output",
     "hide_input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell should have its output hidden!\n",
    "data = np.random.randn(2, 100)\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(*data, c=data[1], s=100*np.abs(data[0]));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Removing inputs from the HTML\n",
    "\n",
    "In the above examples, we are only *hiding* the inputs, with the option\n",
    "that readers can reveal them if they wish. However, if you'd like to completely **remove**\n",
    "the inputs, so that their contents do not make it into the book's HTML, you may\n",
    "use the following tag:\n",
    "\n",
    "To remove the inputs of a cell:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"remove_input\",\n",
    "    ]\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following cell demonstrates removing inputs. Note that in\n",
    "this case, there is no button available to show the input contents,\n",
    "the entire input cell is gone!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing inputs\n",
    "\n",
    "The following cell has its inputs removed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove_input"
    ]
   },
   "outputs": [],
   "source": [
    "# For example, this cell's inputs will be removed\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.ion()\n",
    "\n",
    "data = np.random.randn(2, 100)\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(*data, c=data[1], s=100*np.abs(data[0]));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing outputs\n",
    "\n",
    "Similar to hiding inputs, it is also possible to hide the outputs\n",
    "of a cell.\n",
    "\n",
    "To remove the outputs of a cell:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"remove_output\",\n",
    "    ]\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing an entire cell\n",
    "\n",
    "You can also remove **both** the inputs and outputs of a cell, in which case it\n",
    "won't show up in your book at all. These cells remain in the notebook file itself,\n",
    "so they'll show up if readers click on a JupyterHub or Binder link from a page.\n",
    "\n",
    "To remove both the inputs and outputs of a cell, add the tag `remove_cell` to the tags\n",
    "of the cell. Here's an example of cell metadata that would trigger the \"remove cell\" behavior:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"remove_cell\",\n",
    "    ]\n",
    "}\n",
    "```\n",
    "\n",
    "These cells will be entirely removed from each book page - remember that if you'd like to\n",
    "optionally display the inputs of a cell instead, you should use the `hide_input` tag.\n",
    "\n",
    "For example, there's a cell below this one that won't make it into the final book,\n",
    "because it has been removed!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove_cell"
    ]
   },
   "outputs": [],
   "source": [
    "# For example, this entire cell (input and output) will be removed\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.ion()\n",
    "\n",
    "data = np.random.randn(2, 100)\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(*data, c=data[1], s=100*np.abs(data[0]));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing markdown cells\n",
    "\n",
    "Sometimes, you have extra Markdown in your documents that isn't meant for the\n",
    "reader. For example, if you want to organize your notebook based on developer-relevant\n",
    "information (like \"# Import packages\") but you don't want the reader to see this.\n",
    "\n",
    "In this case, you can use the `remove_cell` pattern described above as well.\n",
    "\n",
    "Here's an example of markdown cell metadata that would trigger the \"hide text\" behavior:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"tags\": [\n",
    "        \"remove_cell\",\n",
    "    ]\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "remove_cell"
    ]
   },
   "source": [
    "### For example ðŸŽ‰\n",
    "\n",
    "This markdown cell will be hidden from users!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing empty cells\n",
    "\n",
    "You don't need to do anything to remove empty cells from your pages.\n",
    "Jupyter Book will remove these automatically. Any cell with *only*\n",
    "whitespace will be removed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For example, in the notebook for this page there are two cells above this one. One\n",
    "cell with whitespace, and another cell with a few line-breaks. Both are gone in\n",
    "the final output."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
