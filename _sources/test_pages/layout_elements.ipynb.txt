{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Testing page elements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "square = np.random.randn(100, 100)\n",
    "wide = np.random.randn(100, 1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hiding inputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [],
   "source": [
    "# Hide input\n",
    "square = np.random.randn(100, 100)\n",
    "wide = np.random.randn(100, 1000)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(square)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(wide)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hiding outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide_output"
    ]
   },
   "outputs": [],
   "source": [
    "# Hide input\n",
    "square = np.random.randn(100, 100)\n",
    "wide = np.random.randn(100, 1000)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(square)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(wide)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hiding markdown"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "source": [
    "### This is a hidden markdown cell\n",
    "\n",
    "It should be hidden!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hiding both inputs and outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide_input",
     "hide_output"
    ]
   },
   "outputs": [],
   "source": [
    "square = np.random.randn(100, 100)\n",
    "wide = np.random.randn(100, 1000)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(square)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(wide)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing inputs / outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove_input"
    ]
   },
   "outputs": [],
   "source": [
    "# Remove input\n",
    "square = np.random.randn(100, 100)\n",
    "wide = np.random.randn(100, 1000)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(square)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(wide)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove_output"
    ]
   },
   "outputs": [],
   "source": [
    "# Remove output\n",
    "square = np.random.randn(100, 100)\n",
    "wide = np.random.randn(100, 1000)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(square)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(wide)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing markdown cells\n",
    "\n",
    "Remove the markdown cell below (below should not be there)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "remove_input"
    ]
   },
   "source": [
    "This markdown should be removed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Full width"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "full_width"
    ]
   },
   "outputs": [],
   "source": [
    "## A full-width square figure\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(square)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "full_width"
    ]
   },
   "outputs": [],
   "source": [
    "## A full-width wide figure\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(wide)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now here's the same figure at regular width\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(wide)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "full_width"
    ]
   },
   "source": [
    "## Full-width markdown\n",
    "\n",
    "This is some markdown that should be shown at full width.\n",
    "\n",
    "Here's the Jupyter logo:\n",
    "\n",
    "![](https://raw.githubusercontent.com/adebar/awesome-jupyter/master/logo.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sidebar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "popout"
    ]
   },
   "outputs": [],
   "source": [
    "## code cell in the sidebar with output\n",
    "fig, ax = plt.subplots()\n",
    "ax.imshow(wide)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "popout"
    ]
   },
   "source": [
    "Markdown cell with code in sidebar\n",
    "\n",
    "```python\n",
    "a = 2\n",
    "b = 3\n",
    "def aplusb(a, b):\n",
    "    return a+b\n",
    "```\n",
    "and now r\n",
    "\n",
    "```r\n",
    "a <- 2\n",
    "b <- 4\n",
    "a+b\n",
    "```\n",
    "\n",
    "how does it look?\n",
    "\n",
    "Markdown cell with images in sidebar\n",
    "\n",
    "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Jupyter_logo.svg/883px-Jupyter_logo.svg.png\" style=\"max-width:200px\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# More content after the popouts\n",
    "\n",
    "This is extra content after the popouts to see if cells overlap and such.\n",
    "Also to make sure you can still interact with the popout content.\n",
    "This is extra content after the popouts to see if cells overlap and such.\n",
    "Also to make sure you can still interact with the popout content.\n",
    "\n",
    "```python\n",
    "a = 2\n",
    "```\n",
    "\n",
    "This is extra content after the popouts to see if cells overlap and such.\n",
    "Also to make sure you can still interact with the popout content.\n",
    "This is extra content after the popouts to see if cells overlap and such.\n",
    "Also to make sure you can still interact with the popout content.\n",
    "This is extra content after the popouts to see if cells overlap and such.\n",
    "Also to make sure you can still interact with the popout content."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Quotations and epigraphs\n",
    "\n",
    "This last section shows quotations and epigraphs. First off, we'll have a quotation:\n",
    "\n",
    "A quote with no attribution:\n",
    "\n",
    "> Here's my quote, it's pretty neat.\n",
    "> I wonder how many lines I can create with\n",
    "> a single stream-of-consciousness quote.\n",
    "> I could try to add a list of ideas to talk about.\n",
    "> I suppose I could just keep going on forever,\n",
    "> but I'll stop here.\n",
    "\n",
    "A quote with attribution\n",
    "\n",
    "> Here's my quote, it's pretty neat.\n",
    "> I wonder how many lines I can create with\n",
    "> a single stream-of-consciousness quote.\n",
    "> I could try to add a list of ideas to talk about.\n",
    "> I suppose I could just keep going on forever,\n",
    "> but I'll stop here.\n",
    "> \n",
    "> - Jo the Jovyan"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "epigraph"
    ]
   },
   "source": [
    "And now here's the same thing with an epigraph!\n",
    "\n",
    "A quote with no attribution:\n",
    "\n",
    "> Here's my quote, it's pretty neat.\n",
    "> I wonder how many lines I can create with\n",
    "> a single stream-of-consciousness quote.\n",
    "> I could try to add a list of ideas to talk about.\n",
    "> I suppose I could just keep going on forever,\n",
    "> but I'll stop here.\n",
    "\n",
    "A quote with attribution\n",
    "\n",
    "> Here's my quote, it's pretty neat.\n",
    "> I wonder how many lines I can create with\n",
    "> a single stream-of-consciousness quote.\n",
    "> I could try to add a list of ideas to talk about.\n",
    "> I suppose I could just keep going on forever,\n",
    "> but I'll stop here.\n",
    "> - Jo the Jovyan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
